## How to install and configure ELK on Ubuntu 20.04 using installation package [ AWS t3.large(2vCPU, 8GB RAM)]
===============================================================================
# Installation order
---------------------
1. Elasticsearch
2. Kibana
3. Logstash
4. Beats
5. APM Server
6. Elasticsearch Hadoop


# Installation of Elasticsearch
--------------------------------
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.1-amd64.deb
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.12.1-amd64.deb.sha512
shasum -a 512 -c elasticsearch-7.12.1-amd64.deb.sha512 
sudo dpkg -i elasticsearch-7.12.1-amd64.deb
sudo /bin/systemctl daemon-reload

* To start and stop elastic search
sudo /bin/systemctl enable elasticsearch.service
sudo systemctl stop elasticsearch.service

* To check it is running properly
curl -X GET "localhost:9200/?pretty"

# Installation of Kibana
------------------------
wget https://artifacts.elastic.co/downloads/kibana/kibana-7.12.1-amd64.deb
shasum -a 512 kibana-7.12.1-amd64.deb 
sudo dpkg -i kibana-7.12.1-amd64.deb
sudo /bin/systemctl daemon-reload
sudo /bin/systemctl enable kibana.service

* To start and Stop
sudo systemctl start kibana.service
sudo systemctl stop kibana.service

$ curl -O https://artifacts.elastic.co/downloads/kibana/kibana-7.9.2-linux-x86_64.tar.gz
$ curl https://artifacts.elastic.co/downloads/kibana/kibana-7.9.2-linux-x86_64.tar.gz.sha512 | shasum -a 512 -c - 
$ tar -xzf kibana-7.9.2-linux-x86_64.tar.gz
$ cd kibana-7.9.2-linux-x86_64/

Update config/kibana.yml with
server.host: 0.0.0.0

Access Kibana from http://<ip-address>:5601/app/kibana#/home


# Installation of Logstash
---------------------------
$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
$ sudo apt-get install apt-transport-https
$ echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
$ sudo apt-get update && 
$ sudo apt-get install openjdk-11-jre-headless

Set $JAVA_HOME and $PATH environment variable
export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
export PATH=$PATH:$JAVA_HOME/bin

$ sudo apt-get install logstash
$ sudo systemctl start logstash.service


sudo systemctl stop logstash
sudo systemctl stop kibana
sudo systemctl stop elasticsearch



Create file under "logstash-7.9.2" named "config/logstash-simple.conf" and write following content in it
input { stdin { } }
output {
  elasticsearch { hosts => ["localhost:9200"] }
  stdout { codec => rubydebug }
}
Start elasticsearch and kibana then run the following command
$ bin/logstash -f config/logstash-simple.conf

# Configure input plugins http_poller
https://www.elastic.co/guide/en/logstash/current/plugins-inputs-http_poller.html

Reference page: https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html

# Configure http_poller plugins in Logstash
- Create a config file where put all APIs in input and Elasticsearch url as output. 
- The data will be automatically indexed and sent to Elasticsearch.
Config file will look like as follows:
input {
  http_poller {
    urls => {
      test1 => "http://localhost:9200"
      test2 => {
        # Supports all options supported by ruby's Manticore HTTP client
        method => get
        user => "AzureDiamond"
        password => "hunter2"
        url => "http://localhost:9200/_cluster/health"
        headers => {
          Accept => "application/json"
        }
     }
    }
    request_timeout => 60
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    schedule => { cron => "* * * * * UTC"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    metadata_target => "http_poller_metadata"
  }
}

output {
  elasticsearch {
    hosts => ["localhost:9200"]
  }
  stdout {
    codec => rubydebug
  }
}

==========================================
## Steps to securing the Elastic Stack ##
==========================================
ref: https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash

# Configure hostname
---------------------
Add hostnames in /etc/hosts file
$ sudo vi /etc/hosts

Add the line -> 127.0.0.1 localhost elastic.test.com kibana.test.com logstash.test.com

# Set environment variable ES_HOME and ES_PATH_CONF
$ export ES_HOME=/home/userone/elasticsearch-7.9.2
$ export ES_PATH_CONF=$ES_HOME/config

# Create a temporary folder in home path
$ cd
$ mkdir tmp
$ cd tmp
$ mkdir cert_blog

# Create instance yaml file
$ vi ~/tmp/cert_blog/instance.yml
instances:
  - name: 'elasticsearch'
    dns: [ 'elastic.test.com' ]
  - name: 'kibana'
    dns: [ 'kibana.test.com' ]
  - name: 'logstash'
    dns: [ 'logstash.test.com' ]

# Generate CA and server certificates
$ cd $ES_HOME
$ bin/elasticsearch-certutil cert --keep-ca-key --pem --in ~/tmp/cert_blog/instance.yml --out ~/tmp/cert_blog/certs.zip

# Unzip the certificates
$ sudo apt-get install unzip
$ cd ~/tmp/cert_blog
$ unzip certs.zip -d ./certs

# Enable TLS for Elastic Search
-------------------------------
# Copy cert file to config folder
$ cd $ES_PATH_CONF
$ mkdir certs
$ cp ~/tmp/cert_blog/certs/ca/ca* ~/tmp/cert_blog/certs/elasticsearch/* certs

# Configure elasticsearch.yml
$ vi elassticsearch.yml

node.name: elasticsearch
network.host: elastic.test.com
xpack.security.enabled: true    
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/elasticsearch.key
xpack.security.http.ssl.certificate: certs/elasticsearch.crt
xpack.security.transport.ssl.key: certs/elasticsearch.key
xpack.security.transport.ssl.certificate: certs/elasticsearch.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca.crt
discovery.seed_hosts: [ "elastic.test.com" ]
cluster.initial_master_nodes: [ "elasticsearch" ]

# Enable TLS for Kibana
-------------------------
# Set environment variable KIBANA_HOME and KIBANA_PATH_CONFIG
$ export KIBANA_HOME=/home/userone/kibana-7.9.2
$ export KIBANA_PATH_CONFIG=$KIBANA_HOME/config
